# Copyright (c) 2023 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#
"""Unit tests for cmd_image.py implementation."""

import pytest

from suit_generator.cmd_image import ImageCreator, EnvelopeStorage
from suit_generator.cmd_image import main as cmd_image_main
from suit_generator.exceptions import GeneratorError, SUITError

from unittest.mock import _Call

MAX_CACHE_COUNT = 16

addresses = {0x00000000: b"\x00\x00\x00\x00", 0xDEADBEEF: b"\xEF\xBE\xAD\xDE", 0xFFFFFFFF: b"\xFF\xFF\xFF\xFF"}
sizes = {0x00000000: b"\x00\x00\x00\x00", 0x01020304: b"\x04\x03\x02\x01", 0xFFFFFFFF: b"\xFF\xFF\xFF\xFF"}

signed_envelope_without_class_id_input = (
    b"\xd8k\xa4\x02Xs\x82X$\x82/X \xf1:\x80\x8f\xa3\x16)\x95\xd4G\xd3\xde\xe8\r\xa6\xb6\n\xcc\x03"
    b"\xb8m\xdc{\x12Z\x9b\xe5\x9e\xa0\xddL]XJ\xd2\x84C\xa1\x01&\xa0\xf6X@0!\n\xd4\xb7=\x13\xfc\xbaF"
    b"*\xb02\xa7p\xb5s\x83@6}\x96Q\x1d\xdc\xb3)\x07@<0\x99\xd7J\x1c\xaa\x8f_6\xf3\x08\xaa\xa7\xde"
    b"\x8fG\xedJ\xdd\xcdO^!$\x94\xa2U\xad\xb4\xb6\x8bC\xa8S\x03X\xba\xa7\x01\x01\x02\x01\x03Xo\xa2"
    b"\x02\x81\x84DcMEMA\x02E\x1a\x0e\n\xa0\x00E\x1a\x00\x05`\x00\x04XU\x86\x14\xa4\x01Pv\x17\xda"
    b"\xa5q\xfdZ\x85\x8f\x94\xe2\x8ds\\\xe9\xf4\x02P\x08\xc1\xb5\x99U\xe8_\xbc\x9ev{\xc2\x9c\xe1\xb0"
    b"M\x03X$\x82/X fhz\xad\xf8b\xbdwl\x8f\xc1\x8b\x8e\x9f\x8e \x08\x97\x14\x85n\xe23\xb3\x90*Y\x1d"
    b"\r_)%\x0e\x18 \x01\x0f\x02\x0f\x07C\x82\x03\x0f\tC\x82\x17\x02\x11R\x86\x14\xa1\x15i#file.bin"
    b"\x15\x02\x03\x0f\x17\x82/X \xd6%\x82'\x08\xfb\x1b\x18x\x8c\x98waBt\xf0\x966\xa7\xe0yN\xbd\x87"
    b"\x9b\xa1\x90*\xf1K8\x05\x17X\x97\xa1\x84DcMEMA\x02E\x1a\x0e\n\xa0\x00E\x1a\x00\x05`\x00\xa6"
    b"\x01x\x18Nordic Semiconductor ASA\x02onRF54H20_cpuapp\x03nnordicsemi.com\x04x\x1dThe nRF54H20"
    b" application core\x05x\x1aSample application core FW\x06fv1.0.0i#file.binX \x00\x00\x00\x00"
    b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    b"\x00\x00\x00\x00\x00"
)
signed_envelope_input = (
    b"\xd8k\xa4\x02Xs\x82X$\x82/X ,\xb17i\xebj\xb3f \x95'\x0e\\\xa6\x8f\xc0\xb5\x9fnd\xf32\xa1)k<"
    b"\xe0\x8e\x9a\xcaO\x7fXJ\xd2\x84C\xa1\x01&\xa0\xf6X@\x1d\x8e\xc1h\xbd\x91\xa5\xb3C5\xb6V=xI\x80"
    b"#\xd9\xd6\xbdh~\xd2\x8a\xa8:\xd7zg\xbf#\x87\x00k\x7f\"\x88V'\x99\xb3\x08ITi\x04\x0e0\xe9A@:"
    b"\xafB\xfd\x16\xd1\xe3\x1cS\x17$\x97\xab\x03X\xda\xa8\x01\x01\x02\x01\x03Xo\xa2\x02\x81\x84DcME"
    b"MA\x02E\x1a\x0e\n\xa0\x00E\x1a\x00\x05`\x00\x04XU\x86\x14\xa4\x01Pv\x17\xda\xa5q\xfdZ\x85\x8f"
    b"\x94\xe2\x8ds\\\xe9\xf4\x02P\x08\xc1\xb5\x99U\xe8_\xbc\x9ev{\xc2\x9c\xe1\xb0M\x03X$\x82/X fhz"
    b"\xad\xf8b\xbdwl\x8f\xc1\x8b\x8e\x9f\x8e \x08\x97\x14\x85n\xe23\xb3\x90*Y\x1d\r_)%\x0e\x18 \x01"
    b"\x0f\x02\x0f\x07C\x82\x03\x0f\tC\x82\x17\x02\x11R\x86\x14\xa1\x15i#file.bin\x15\x02\x03\x0f"
    b"\x17\x82/X \xd6%\x82'\x08\xfb\x1b\x18x\x8c\x98waBt\xf0\x966\xa7\xe0yN\xbd\x87\x9b\xa1\x90*\xf1"
    b"K8\x05\x05\x82LkINSTLD_MFSTP\x08\xc1\xb5\x99U\xe8_\xbc\x9ev{\xc2\x9c\xe1\xb0M\x17X\x97\xa1\x84"
    b"DcMEMA\x02E\x1a\x0e\n\xa0\x00E\x1a\x00\x05`\x00\xa6\x01x\x18Nordic Semiconductor ASA\x02onRF54"
    b"H20_cpuapp\x03nnordicsemi.com\x04x\x1dThe nRF54H20 application core\x05x\x1aSample application"
    b" core FW\x06fv1.0.0i#file.binX \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
)
malformed_envelope_input = b"\x00"

expected_boot_storage = (
    # Empty update candidate info (0x0E1E9340)
    ":020000040E1ECE\n"
    ":10934000AA55AA550000000000000000000000001F\n"
    ":10935000000000000000000000000000000000000D\n"
    ":1093600000000000000000000000000000000000FD\n"
    ":1093700000000000000000000000000000000000ED\n"
    # Uninitialized NVV area (0x0E1E9380 - 0x0E1E9400)
    # Empty root manifest slot (0x0E1E9400)
    ":10940000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C\n"
    ":10941000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5C\n"
    ":10942000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4C\n"
    ":10943000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C\n"
    ":10944000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2C\n"
    ":10945000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1C\n"
    ":10946000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0C\n"
    ":10947000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC\n"
    ":10948000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC\n"
    ":10949000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC\n"
    ":1094A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC\n"
    ":1094B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC\n"
    ":1094C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAC\n"
    ":1094D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9C\n"
    ":1094E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C\n"
    ":1094F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7C\n"
    ":10950000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6B\n"
    ":10951000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5B\n"
    ":10952000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4B\n"
    ":10953000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3B\n"
    ":10954000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2B\n"
    ":10955000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1B\n"
    ":10956000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0B\n"
    ":10957000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB\n"
    ":10958000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEB\n"
    ":10959000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDB\n"
    ":1095A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCB\n"
    ":1095B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB\n"
    ":1095C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB\n"
    ":1095D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9B\n"
    ":1095E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8B\n"
    ":1095F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7B\n"
    ":10960000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A\n"
    ":10961000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A\n"
    ":10962000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A\n"
    ":10963000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A\n"
    ":10964000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A\n"
    ":10965000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A\n"
    ":10966000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A\n"
    ":10967000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA\n"
    ":10968000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA\n"
    ":10969000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA\n"
    ":1096A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA\n"
    ":1096B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\n"
    ":1096C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA\n"
    ":1096D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A\n"
    ":1096E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A\n"
    ":1096F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A\n"
    ":10970000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69\n"
    ":10971000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59\n"
    ":10972000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49\n"
    ":10973000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39\n"
    ":10974000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29\n"
    ":10975000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF19\n"
    ":10976000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09\n"
    ":10977000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9\n"
    ":10978000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9\n"
    ":10979000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9\n"
    ":1097A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9\n"
    ":1097B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9\n"
    ":1097C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9\n"
    ":1097D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99\n"
    ":1097E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89\n"
    ":1097F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79\n"
    ":10980000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF68\n"
    ":10981000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF58\n"
    ":10982000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF48\n"
    ":10983000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF38\n"
    ":10984000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF28\n"
    ":10985000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF18\n"
    ":10986000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF08\n"
    ":10987000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8\n"
    ":10988000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8\n"
    ":10989000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8\n"
    ":1098A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC8\n"
    ":1098B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB8\n"
    ":1098C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8\n"
    ":1098D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98\n"
    ":1098E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF88\n"
    ":1098F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF78\n"
    ":10990000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF67\n"
    ":10991000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF57\n"
    ":10992000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF47\n"
    ":10993000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF37\n"
    ":10994000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27\n"
    ":10995000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF17\n"
    ":10996000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF07\n"
    ":10997000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7\n"
    ":10998000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7\n"
    ":10999000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7\n"
    ":1099A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7\n"
    ":1099B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB7\n"
    ":1099C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA7\n"
    ":1099D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF97\n"
    ":1099E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87\n"
    ":1099F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF77\n"
    ":109A0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF66\n"
    ":109A1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF56\n"
    ":109A2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF46\n"
    ":109A3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF36\n"
    ":109A4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF26\n"
    ":109A5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16\n"
    ":109A6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF06\n"
    ":109A7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6\n"
    ":109A8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE6\n"
    ":109A9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6\n"
    ":109AA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC6\n"
    ":109AB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB6\n"
    ":109AC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA6\n"
    ":109AD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF96\n"
    ":109AE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF86\n"
    ":109AF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF76\n"
    ":109B0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF65\n"
    ":109B1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF55\n"
    ":109B2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF45\n"
    ":109B3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF35\n"
    ":109B4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF25\n"
    ":109B5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF15\n"
    ":109B6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF05\n"
    ":109B7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5\n"
    ":109B8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5\n"
    ":109B9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD5\n"
    ":109BA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC5\n"
    ":109BB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB5\n"
    ":109BC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA5\n"
    ":109BD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF95\n"
    ":109BE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF85\n"
    ":109BF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF75\n"
    # Application recovery manifest slot (0x0E1E9C00)
    ":109C0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF64\n"
    ":109C1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF54\n"
    ":109C2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF44\n"
    ":109C3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF34\n"
    ":109C4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF24\n"
    ":109C5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF14\n"
    ":109C6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF04\n"
    ":109C7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n"
    ":109C8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4\n"
    ":109C9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4\n"
    ":109CA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4\n"
    ":109CB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB4\n"
    ":109CC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA4\n"
    ":109CD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF94\n"
    ":109CE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF84\n"
    ":109CF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF74\n"
    ":109D0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF63\n"
    ":109D1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF53\n"
    ":109D2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43\n"
    ":109D3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33\n"
    ":109D4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF23\n"
    ":109D5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF13\n"
    ":109D6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03\n"
    ":109D7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3\n"
    ":109D8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE3\n"
    ":109D9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD3\n"
    ":109DA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n"
    ":109DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n"
    ":109DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n"
    ":109DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n"
    ":109DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n"
    ":109DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF73\n"
    ":109E0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF62\n"
    ":109E1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF52\n"
    ":109E2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF42\n"
    ":109E3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF32\n"
    ":109E4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF22\n"
    ":109E5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF12\n"
    ":109E6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02\n"
    ":109E7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2\n"
    ":109E8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE2\n"
    ":109E9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD2\n"
    ":109EA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC2\n"
    ":109EB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB2\n"
    ":109EC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA2\n"
    ":109ED000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF92\n"
    ":109EE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF82\n"
    ":109EF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF72\n"
    ":109F0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF61\n"
    ":109F1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF51\n"
    ":109F2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF41\n"
    ":109F3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF31\n"
    ":109F4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF21\n"
    ":109F5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF11\n"
    ":109F6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01\n"
    ":109F7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1\n"
    ":109F8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1\n"
    ":109F9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1\n"
    ":109FA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1\n"
    ":109FB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB1\n"
    ":109FC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA1\n"
    ":109FD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF91\n"
    ":109FE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81\n"
    ":109FF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71\n"
    ":10A00000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF60\n"
    ":10A01000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF50\n"
    ":10A02000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF40\n"
    ":10A03000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF30\n"
    ":10A04000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF20\n"
    ":10A05000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF10\n"
    ":10A06000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00\n"
    ":10A07000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0\n"
    ":10A08000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0\n"
    ":10A09000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0\n"
    ":10A0A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0\n"
    ":10A0B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB0\n"
    ":10A0C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0\n"
    ":10A0D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90\n"
    ":10A0E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80\n"
    ":10A0F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF70\n"
    ":10A10000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5F\n"
    ":10A11000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4F\n"
    ":10A12000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F\n"
    ":10A13000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2F\n"
    ":10A14000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1F\n"
    ":10A15000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F\n"
    ":10A16000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n"
    ":10A17000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF\n"
    ":10A18000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF\n"
    ":10A19000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCF\n"
    ":10A1A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBF\n"
    ":10A1B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAF\n"
    ":10A1C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9F\n"
    ":10A1D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8F\n"
    ":10A1E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7F\n"
    ":10A1F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6F\n"
    ":10A20000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5E\n"
    ":10A21000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E\n"
    ":10A22000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3E\n"
    ":10A23000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2E\n"
    ":10A24000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1E\n"
    ":10A25000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0E\n"
    ":10A26000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE\n"
    ":10A27000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE\n"
    ":10A28000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDE\n"
    ":10A29000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE\n"
    ":10A2A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBE\n"
    ":10A2B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAE\n"
    ":10A2C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9E\n"
    ":10A2D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8E\n"
    ":10A2E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7E\n"
    ":10A2F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6E\n"
    ":10A30000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D\n"
    ":10A31000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4D\n"
    ":10A32000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3D\n"
    ":10A33000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2D\n"
    ":10A34000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1D\n"
    ":10A35000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0D\n"
    ":10A36000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD\n"
    ":10A37000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED\n"
    ":10A38000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD\n"
    ":10A39000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCD\n"
    ":10A3A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBD\n"
    ":10A3B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAD\n"
    ":10A3C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9D\n"
    ":10A3D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8D\n"
    ":10A3E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7D\n"
    ":10A3F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6D\n"
    # Application local 1 manifest slot (0x0E1EA400)
    ":10A40000A300010119014602590156D86BA2025856\n"
    ":10A4100073825824822F58202CB13769EB6AB366B7\n"
    ":10A420002095270E5CA68FC0B59F6E64F332A129DC\n"
    ":10A430006B3CE08E9ACA4F7F584AD28443A10126D2\n"
    ":10A44000A0F658401D8EC168BD91A5B34335B656E0\n"
    ":10A450003D78498023D9D6BD687ED28AA83AD77A7A\n"
    ":10A4600067BF2387006B7F2288562799B30849541A\n"
    ":10A4700069040E30E941403AAF42FD16D1E31C5366\n"
    ":10A48000172497AB0358DAA80101020103586FA201\n"
    ":10A4900002818444634D454D4102451A0E0AA000D5\n"
    ":10A4A000451A000560000458558614A4015076171B\n"
    ":10A4B000DAA571FD5A858F94E28D735CE9F4025040\n"
    ":10A4C00008C1B59955E85FBC9E767BC29CE1B04D52\n"
    ":10A4D000035824822F582066687AADF862BD776CE5\n"
    ":10A4E0008FC18B8E9F8E20089714856EE233B390B8\n"
    ":10A4F0002A591D0D5F29250E1820010F020F074351\n"
    ":10A5000082030F094382170211528614A115692391\n"
    ":10A5100066696C652E62696E1502030F17822F58EB\n"
    ":10A5200020D625822708FB1B18788C987761427407\n"
    ":10A53000F09636A7E0794EBD879BA1902AF14B3863\n"
    ":10A540000505824C6B494E53544C445F4D46535461\n"
    ":10A550005008C1B59955E85FBC9E767BC29CE1B0BE\n"
    ":10A560004DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAD\n"
    ":10A57000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEB\n"
    ":10A58000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDB\n"
    ":10A59000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCB\n"
    ":10A5A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBB\n"
    ":10A5B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAB\n"
    ":10A5C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9B\n"
    ":10A5D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8B\n"
    ":10A5E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7B\n"
    ":10A5F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6B\n"
    ":10A60000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A\n"
    ":10A61000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A\n"
    ":10A62000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A\n"
    ":10A63000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A\n"
    ":10A64000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A\n"
    ":10A65000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A\n"
    ":10A66000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA\n"
    ":10A67000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA\n"
    ":10A68000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA\n"
    ":10A69000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA\n"
    ":10A6A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\n"
    ":10A6B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA\n"
    ":10A6C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A\n"
    ":10A6D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A\n"
    ":10A6E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A\n"
    ":10A6F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A\n"
    ":10A70000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59\n"
    ":10A71000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49\n"
    ":10A72000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39\n"
    ":10A73000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29\n"
    ":10A74000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF19\n"
    ":10A75000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09\n"
    ":10A76000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9\n"
    ":10A77000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9\n"
    ":10A78000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9\n"
    ":10A79000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9\n"
    ":10A7A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9\n"
    ":10A7B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9\n"
    ":10A7C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99\n"
    ":10A7D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89\n"
    ":10A7E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79\n"
    ":10A7F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69\n"
    # Application local 2 manifest slot (0x0E1EA800)
    ":10A80000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF58\n"
    ":10A81000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF48\n"
    ":10A82000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF38\n"
    ":10A83000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF28\n"
    ":10A84000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF18\n"
    ":10A85000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF08\n"
    ":10A86000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8\n"
    ":10A87000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8\n"
    ":10A88000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8\n"
    ":10A89000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC8\n"
    ":10A8A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB8\n"
    ":10A8B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8\n"
    ":10A8C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF98\n"
    ":10A8D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF88\n"
    ":10A8E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF78\n"
    ":10A8F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF68\n"
    ":10A90000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF57\n"
    ":10A91000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF47\n"
    ":10A92000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF37\n"
    ":10A93000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27\n"
    ":10A94000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF17\n"
    ":10A95000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF07\n"
    ":10A96000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7\n"
    ":10A97000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7\n"
    ":10A98000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD7\n"
    ":10A99000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7\n"
    ":10A9A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB7\n"
    ":10A9B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA7\n"
    ":10A9C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF97\n"
    ":10A9D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87\n"
    ":10A9E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF77\n"
    ":10A9F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF67\n"
    ":10AA0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF56\n"
    ":10AA1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF46\n"
    ":10AA2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF36\n"
    ":10AA3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF26\n"
    ":10AA4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16\n"
    ":10AA5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF06\n"
    ":10AA6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6\n"
    ":10AA7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE6\n"
    ":10AA8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6\n"
    ":10AA9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC6\n"
    ":10AAA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB6\n"
    ":10AAB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA6\n"
    ":10AAC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF96\n"
    ":10AAD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF86\n"
    ":10AAE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF76\n"
    ":10AAF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF66\n"
    ":10AB0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF55\n"
    ":10AB1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF45\n"
    ":10AB2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF35\n"
    ":10AB3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF25\n"
    ":10AB4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF15\n"
    ":10AB5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF05\n"
    ":10AB6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5\n"
    ":10AB7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5\n"
    ":10AB8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD5\n"
    ":10AB9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC5\n"
    ":10ABA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB5\n"
    ":10ABB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA5\n"
    ":10ABC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF95\n"
    ":10ABD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF85\n"
    ":10ABE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF75\n"
    ":10ABF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF65\n"
    # Application local 3 manifest slot (0x0E1EAC00)
    ":10AC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF54\n"
    ":10AC1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF44\n"
    ":10AC2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF34\n"
    ":10AC3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF24\n"
    ":10AC4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF14\n"
    ":10AC5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF04\n"
    ":10AC6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n"
    ":10AC7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4\n"
    ":10AC8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4\n"
    ":10AC9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4\n"
    ":10ACA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB4\n"
    ":10ACB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA4\n"
    ":10ACC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF94\n"
    ":10ACD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF84\n"
    ":10ACE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF74\n"
    ":10ACF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF64\n"
    ":10AD0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF53\n"
    ":10AD1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43\n"
    ":10AD2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF33\n"
    ":10AD3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF23\n"
    ":10AD4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF13\n"
    ":10AD5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03\n"
    ":10AD6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3\n"
    ":10AD7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE3\n"
    ":10AD8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD3\n"
    ":10AD9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n"
    ":10ADA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n"
    ":10ADB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n"
    ":10ADC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n"
    ":10ADD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n"
    ":10ADE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF73\n"
    ":10ADF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF63\n"
    ":10AE0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF52\n"
    ":10AE1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF42\n"
    ":10AE2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF32\n"
    ":10AE3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF22\n"
    ":10AE4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF12\n"
    ":10AE5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02\n"
    ":10AE6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2\n"
    ":10AE7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE2\n"
    ":10AE8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD2\n"
    ":10AE9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC2\n"
    ":10AEA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB2\n"
    ":10AEB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA2\n"
    ":10AEC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF92\n"
    ":10AED000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF82\n"
    ":10AEE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF72\n"
    ":10AEF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF62\n"
    ":10AF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF51\n"
    ":10AF1000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF41\n"
    ":10AF2000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF31\n"
    ":10AF3000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF21\n"
    ":10AF4000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF11\n"
    ":10AF5000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01\n"
    ":10AF6000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1\n"
    ":10AF7000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1\n"
    ":10AF8000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1\n"
    ":10AF9000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1\n"
    ":10AFA000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB1\n"
    ":10AFB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA1\n"
    ":10AFC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF91\n"
    ":10AFD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81\n"
    ":10AFE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF71\n"
    ":10AFF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF61\n"
    # Application area end (0x0E1EB000)
    ":00000001FF\n"
)

expected_update_storage = (
    ":020000040E1ECE\n"
    ":10EC0000AA55AA55010000000000100E1C020000C9\n"
    ":10EC100000000000000000000000000000000000F4\n"
    ":10EC200000000000000000000000000000000000E4\n"
    ":00000001FF\n"
)
expected_update_dfu_partition = (
    ":020000040E10DC\n"
    ":10000000D86BA4025873825824822F58202CB13701\n"
    ":1000100069EB6AB3662095270E5CA68FC0B59F6E0C\n"
    ":1000200064F332A1296B3CE08E9ACA4F7F584AD2C2\n"
    ":100030008443A10126A0F658401D8EC168BD91A53C\n"
    ":10004000B34335B6563D78498023D9D6BD687ED2B4\n"
    ":100050008AA83AD77A67BF2387006B7F2288562702\n"
    ":1000600099B308495469040E30E941403AAF42FD62\n"
    ":1000700016D1E31C53172497AB0358DAA8010102E9\n"
    ":100080000103586FA202818444634D454D410245EE\n"
    ":100090001A0E0AA000451A0005600004585586147F\n"
    ":1000A000A401507617DAA571FD5A858F94E28D73FD\n"
    ":1000B0005CE9F4025008C1B59955E85FBC9E767BB7\n"
    ":1000C000C29CE1B04D035824822F582066687AAD57\n"
    ":1000D000F862BD776C8FC18B8E9F8E200897148538\n"
    ":1000E0006EE233B3902A591D0D5F29250E182001A9\n"
    ":1000F0000F020F074382030F094382170211528632\n"
    ":1001000014A115692366696C652E62696E15020378\n"
    ":100110000F17822F5820D625822708FB1B18788CB2\n"
    ":100120009877614274F09636A7E0794EBD879BA11F\n"
    ":10013000902AF14B380505824C6B494E53544C4480\n"
    ":100140005F4D4653545008C1B59955E85FBC9E7643\n"
    ":100150007BC29CE1B04D175897A18444634D454D37\n"
    ":100160004102451A0E0AA000451A00056000A601CA\n"
    ":1001700078184E6F726469632053656D69636F6EA2\n"
    ":10018000647563746F7220415341026F6E5246353D\n"
    ":10019000344832305F637075617070036E6E6F72D9\n"
    ":1001A00064696373656D692E636F6D04781D5468AF\n"
    ":1001B00065206E52463534483230206170706C696B\n"
    ":1001C000636174696F6E20636F726505781A53619D\n"
    ":1001D0006D706C65206170706C69636174696F6EBD\n"
    ":1001E00020636F7265204657066676312E302E30BA\n"
    ":1001F000692366696C652E62696E582000000000F4\n"
    ":1002000000000000000000000000000000000000EE\n"
    ":0C021000000000000000000000000000E2\n"
    ":00000001FF\n"
)


def prepare_calls(data):
    """Split data by lines and wrap each line using _Call object for easy assertions; get rid of last newline"""
    return [_Call(("", (f"{line}\n",))) for line in data.split("\n")[:-1]]


@pytest.mark.parametrize("nb_of_caches", range(MAX_CACHE_COUNT + 1))
def test_struct_format(nb_of_caches):
    caches_format = "II" * nb_of_caches
    format = "<IIII" + caches_format
    assert ImageCreator._prepare_suit_storage_struct_format(nb_of_caches) == format


@pytest.mark.parametrize("nb_of_caches", range(MAX_CACHE_COUNT + 1))
def test_update_candidate_info_for_boot(nb_of_caches):
    suit_storage_bytes = b"\xAA\x55\xAA\x55\x00\x00\x00\x00"
    envelope_address_size_bytes = b"\x00\x00\x00\x00\x00\x00\x00\x00"
    caches_bytes = b"\x00\x00\x00\x00\x00\x00\x00\x00" * nb_of_caches

    expected_bytes = suit_storage_bytes + envelope_address_size_bytes + caches_bytes

    assert ImageCreator._prepare_update_candidate_info_for_boot(nb_of_caches) == expected_bytes


def test_update_candidate_info_verify_class_id_offset():
    from suit_generator.envelope import SuitEnvelope
    from suit_generator.suit.envelope import SuitEnvelopeTagged
    from cbor2 import loads as cbor_loads

    # Generate envlope object
    envelope = SuitEnvelope()
    envelope._envelope = SuitEnvelopeTagged.from_cbor(signed_envelope_input).to_obj()

    # Generate storage envelope slot for the envelope
    storage = EnvelopeStorage(0)
    storage.add_envelope(envelope)
    (envelope_role, envelope_cbor) = storage._envelopes.popitem()

    # Extract the class ID, based on the offset and minified envelope
    storage_dict = cbor_loads(envelope_cbor)
    offset = storage_dict[EnvelopeStorage.ENVELOPE_SLOT_CLASS_ID_OFFSET_KEY]
    envelope_bstr = storage_dict[EnvelopeStorage.ENVELOPE_SLOT_ENVELOPE_BSTR_KEY]

    # RFC4122 uuid5(nordic_vid, 'nRF54H20_sample_app')
    exp_class_id = b"\x08\xc1\xb5\x99\x55\xe8\x5f\xbc\x9e\x76\x7b\xc2\x9c\xe1\xb0\x4d"

    assert envelope_bstr[offset : offset + 16] == exp_class_id


@pytest.mark.parametrize("nb_of_caches", range(MAX_CACHE_COUNT + 1))
@pytest.mark.parametrize("address", addresses)
@pytest.mark.parametrize("size", sizes)
def test_update_candidate_info_for_update(address, size, nb_of_caches):
    magic_bytes = b"\xAA\x55\xAA\x55"
    nregions_bytes = b"\x01\x00\x00\x00"
    address_bytes = addresses[address]
    size_bytes = sizes[size]

    suit_storage_bytes = magic_bytes + nregions_bytes + address_bytes + size_bytes

    caches_bytes = b"\x00\x00\x00\x00\x00\x00\x00\x00" * nb_of_caches

    expected_bytes = suit_storage_bytes + caches_bytes

    assert ImageCreator._prepare_update_candidate_info_for_update(address, size, nb_of_caches) == expected_bytes


def test_unsupported_image_subcommand():
    with pytest.raises(GeneratorError):
        cmd_image_main(
            image="unsupported",
            input_file="",
            storage_output_file="",
            update_candidate_info_address=0,
            envelope_address=0,
            dfu_partition_output_file="",
            dfu_partition_address=0,
            dfu_max_caches=0,
        )


def test_boot_subcommand_nonexisting_input_file():
    with pytest.raises(GeneratorError):
        cmd_image_main(
            image="boot",
            input_file=["nonexisting"],
            storage_output_directory="",
            update_candidate_info_address=0,
            envelope_address=0,
            envelope_slot_size=2048,
            envelope_slot_count=8,
            dfu_partition_output_file="",
            dfu_partition_address=0,
            dfu_max_caches=0,
        )


def test_boot_subcommand_manifest_without_component_id(mocker):
    io_mock = mocker.mock_open(read_data=signed_envelope_without_class_id_input)
    mocker.patch("builtins.open", io_mock)

    with pytest.raises(GeneratorError):
        cmd_image_main(
            image="boot",
            input_file=["some_input"],
            storage_output_directory="some_output",
            update_candidate_info_address=0x0E1EEC00,
            envelope_address=0x0E1EED80,
            envelope_slot_size=2048,
            envelope_slot_count=8,
            dfu_partition_output_file="",
            dfu_partition_address=0,
            dfu_max_caches=4,
        )


def test_boot_subcommand_success(mocker):
    io_mock = mocker.mock_open(read_data=signed_envelope_input)
    mocker.patch("builtins.open", io_mock)

    cmd_image_main(
        image="boot",
        input_file=["some_input"],
        storage_output_directory="some_output",
        update_candidate_info_address=0x0E1E9340,
        envelope_address=0x0E1E7000,
        envelope_slot_size=2048,
        envelope_slot_count=1,
        dfu_partition_output_file="",
        dfu_partition_address=0,
        dfu_max_caches=6,
    )

    io_mock().read.assert_called_once()
    io_mock().write.assert_has_calls(prepare_calls(expected_boot_storage))


def test_update_subcommand_nonexisting_input_file():
    with pytest.raises(GeneratorError):
        cmd_image_main(
            image="update",
            input_file="nonexisting",
            storage_output_file="",
            update_candidate_info_address=0,
            envelope_address=0,
            dfu_partition_output_file="",
            dfu_partition_address=0,
            dfu_max_caches=0,
        )


def test_update_subcommand_success(mocker):
    io_mock = mocker.mock_open(read_data=signed_envelope_input)

    mocker.patch("builtins.open", io_mock)

    getsize_mock = mocker.Mock()
    getsize_mock.side_effect = lambda _: len(signed_envelope_input)
    mocker.patch("os.path.getsize", getsize_mock)

    cmd_image_main(
        image="update",
        input_file="some_input",
        storage_output_file="some_storage_output",
        update_candidate_info_address=0x0E1EEC00,
        envelope_address=0x0E1EED80,
        dfu_partition_output_file="some_dfu_partition_output",
        dfu_partition_address=0x0E100000,
        dfu_max_caches=4,
    )

    expected_calls = prepare_calls(expected_update_storage) + prepare_calls(expected_update_dfu_partition)

    io_mock().read.assert_called_once()
    io_mock().write.assert_has_calls(expected_calls)


def test_malformed_envelope(mocker):
    io_mock = mocker.mock_open(read_data=malformed_envelope_input)
    mocker.patch("builtins.open", io_mock)

    with pytest.raises(SUITError):
        cmd_image_main(
            image="boot",
            input_file=["some_input"],
            storage_output_directory="some_output",
            update_candidate_info_address=0x0E1FE000,
            envelope_address=0x0E1FF000,
            envelope_slot_size=2048,
            envelope_slot_count=8,
            dfu_partition_output_file="",
            dfu_partition_address=0,
            dfu_max_caches=0,
        )


def test_bin2hex_conversion_error(mocker, monkeypatch):
    io_mock = mocker.mock_open(read_data=signed_envelope_input)

    mocker.patch("builtins.open", io_mock)

    getsize_mock = mocker.Mock()
    getsize_mock.side_effect = lambda _: len(signed_envelope_input)
    mocker.patch("os.path.getsize", getsize_mock)

    def bin2hex_mock(*args, **kwargs):
        """Helper function to return non-zero error code"""
        return 42

    # The intuitive way would be to use 'mocker.patch("intelhex.bin2hex", ...)' but it doesn't mock the bin2hex function
    # when it is imported in tested code by 'from intelhex import bin2hex'.
    # The approach below allows to patch the function regardless of how it is imported in tested code.
    monkeypatch.setattr("intelhex.bin2hex.__code__", bin2hex_mock.__code__)

    with pytest.raises(GeneratorError):
        cmd_image_main(
            image="update",
            input_file="some_input",
            storage_output_file="some_storage_output",
            update_candidate_info_address=0x0E1EEC00,
            envelope_address=0x0E1EED80,
            dfu_partition_output_file="some_dfu_partition_output",
            dfu_partition_address=0x0E100000,
            dfu_max_caches=4,
        )
